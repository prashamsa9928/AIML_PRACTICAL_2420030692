# -*- coding: utf-8 -*-
"""Foundations of Python WEEK - 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A0y2IgpNSA8cojTMR3cM0oav7tpEtnbh
"""

import sys
print("Python version")
print (sys.version)
print("Version info.")
print (sys.version_info)

age = 38
name = 'Pvrao'

print(age)
print(name)

print("age=",age)
print("name=",name)

age = int(input('Enter the age'))
print(age)

name = input('Enter name')
print(name)

'%10.2f' % (3.141592653589793,)

strNew = "{:5s} {:.1f}".format('Python', 3.64)
print(strNew)
strNew = "{:.5s} {:.1f}".format('Python', 3.66)
print(strNew)

import math
print('%010.2f' % (math.pi,))
print('%-10.4f' % (math.e))
print('{:010.2f}'.format(math.pi,))
print('{:10.4f}'.format(math.e))

strOld = "%s %d" % ('Python', 3)
print(strOld)
strNew = "{} {}".format('Python', 3)
print(strNew)
strPos = "{1} {0}".format(3, 'Python')
print(strPos)
strOld = "%(lang)s %(ver)d" % {'ver':3, 'lang':'Python'}
print(strPos)
kwargs = {'ver':3, 'lang':'Python'}
strNew1 = "{lang} {ver}".format(**kwargs)
print(strNew1)
strKey2 = "{lang} {ver}".format(** {'ver':3, 'lang':'Python'})
print(strKey2)
strKey3 = "{lang} {ver}".format(ver=3, lang='Python')
print(strKey3)

text = "Hello World"
print(format(text, '<20'))
print(format(text, '>20'))
print(format(text, '^20'))
print(format(text, '=>20s'))
print(format(text, '*^20s'))
import math
print(format(math.pi, '>10.4'))
print(format(math.pi, '>010.4'))
print(format(-math.pi, '>-10.4'))
print(format(-math.pi, '->10.4'))
print(format(-math.pi, '-^10.4'))
print(format(-math.pi, '0^10.4'))

ex_string = 'Hello World!'
ex_int = 8
ex_float = 12.5
ex_bool = False

print(ex_string)
print(ex_int)
print(ex_float)
print(ex_bool)

print(type(ex_string))
print(type(ex_int))
print(type(ex_float))
print(type(ex_bool))

type(ex_string)

type(ex_int)

type(ex_float)

type(ex_bool)

a = 0b1111  #0o for octal #0x for hexa
b = 0b1010
print(a+b)
print(bin(a+b))

ex_string

print(ex_string)

id(ex_string)

ex_int_2 = ex_int

id(ex_int)

id(ex_int_2)

ex_int + 12

ex_float = ex_float + 7

print(ex_float)

# Addition:
print(1 + 2)
# Subtraction:
print(1 - 2)
# Multiplication:
print(1 * 2)
# Division:
print(4 / 5) #Float division
print(4//5) #Integer Division

# Division of float numbers:
print(4 // 2)
print(-3.0 // 2)

# Exponent power operator:
2 ** 2 **5

# Module can be used to get the remainder:
5%2

import math

math.

math.factorial(500)

True and False

not False

True or False

2 > 1, 2 < 1, 2 > 2, 2 < 2, 2 >= 2, 2 <= 2

# equality
[1,2] == [1,2], [1,2] != [2,1]

#comparision operators

p = 2**3**4
print(p)
q = 2**(4**3)
print(q)
print(p==q)
print(18 & 3)
print(bin(18))
print(bin(3))


print(bin(24))
print(oct(24))
print(hex(24))
a=5
b=6
d=5|6
print(d)

print(5^6)


###shift opertators

print(4 <<4)
print(64 >> 3)

print(3<<5)

'Vnr' + ' ' + 'vjiet'

'Vnr Vjiet '*7

len('Vnr Vjiet')

1 + int('4')

int(12.9)

second = "2"
print(2.0 * float(second))

import sys
print(" Size of int: ", sys.getsizeof(10), "\n",
"Size of float: ", sys.getsizeof(10.3), "\n",
"Size of complex: ", sys.getsizeof(2+3j), "\n",
"Size of empty List: ", sys.getsizeof([]), "\n",
"Size of List with 1 item: ", sys.getsizeof([1]), "\n",
"Size of List with 2 items: ", sys.getsizeof([1,2]), "\n",
"Size of empty Tuple: ", sys.getsizeof(()), "\n",
"Size of Tuple with 1 item: ", sys.getsizeof((1)), "\n",
"Size of Tuple with 2 items: ", sys.getsizeof((1,2)), "\n",
"Size of Tuple with 3 items: ", sys.getsizeof((1,2,3)), "\n",
"Size of empty Set: ", sys.getsizeof({}), "\n",
"Size of Set with 1 item: ", sys.getsizeof({1}), "\n",
"Size of Set with 2 items: ", sys.getsizeof({1,2}), "\n",
"Size of Dict with 1 item: ", sys.getsizeof({"n":1}), "\n",
"Size of Dict with 2 items: ", sys.getsizeof({"n":1, "m":2}))

"""# Question

Which of the following would return a float of 2.0?

first = 1.0 second = "2" third = "3.3"

first + float(second)

float(second) + float(third)

first + int(third)

first + int(float(third))

int(first) + int(float(third))

2.0 * second
"""

s = "Hello world"
type(s)
print(len(s))
# Indexing the first (index 0) character in the string:
s[4]

# This is called *slicing*. We start at the left index
#   and go up to but don't include the right index:

# Objects at indexes 0, 1, and 2
s[0:4]

# From index 6 up to the end of the string:
s[6:]

# No start or end specified:
s[:]

# Can we index from the right side?
s[-3]

s[1:-3]

# Define a step size of 2, i.e., every other character:
s[::3]

album = 'Vnr vjiet'

print(album[0])

album[0:4]

album[4:]

len(album)

s = "Hello world"
type(s)
s.rsplit
#help(s.rsplit)

s2 = s.replace("world", "test")
print(s2)

"""# PROBLEMS

What is the final value of new_record in program below?

1. What is the output if we print new_record.

    record = 'Scorpion'
    
    new_record = record
    
    record = 'God's Plan'

2. If a = 1532, what does a[2] return?


3. What does the following print?

    record = 'Scorpion'
    
    print(f"Drake's album {record} is lyrically dense")
  
  
4. Given some string variable thing:

    What does thing[low:high] do?

    What does thing[low:] (without a value after the colon) do?

    What does thing[:high] (without a value before the colon) do?

    What does thing[:] (just a colon) do?

    What does thing[number:some-negative-number] do?

    What happens when you choose a high value which is out of range? (i.e., try album[15])
    
5. Add two binary numbers abd print their result in octal form.

6. Add two hexa decimal numbers and print their result in binary form.
"""

print('Vnr Vjiet will open after lockdown')

max(3, 6, 5)

min(5, 3, 2)

round(5.3326, 3)

round(5.88, 1)

weight = 60.1543

print(f"My suitcase weighs {weight: .2f}")

print("My suitcase weighs {:.2f}".format(weight))

easy_string = "0zABc"
print(max(easy_string))

easy_string.upper()

import math

math.factorial(8)

"""QUESTION

Predict what each print statement below will do.


easy_string = "abcABC"

print(max(easy_string))

rich = "gold1"

poor = "tin2"

print(max(rich, poor))

print(max(len(rich), len(poor)))

<a id='cs'></a>
# Control statements
"""

if 1 == 1:
    print('The integer 1 is equal to the integer 1.')
    print('Is the next indented line run, too?')

if 'one' == 'two':
    print("The string 'one' is equal to the string 'two'.")

print('---')
print('These two lines are not indented, so they are always run next.')

if 50 < 30:
    print("50 < 30.")
else:
    print("50 >= 30.")
    print("The else code block wdas run instead of the first block.")

print('---')
print('These two lines are not indented, so they are always run next.')

health = 55

if health > 70:
    print('You are in great health!')
elif health > 40:
    print('Your health is average.')
    print('Exercise and eat healthily!')
else:
    print('Your health is low.')
    print('Please see a doctor now.')

print('---')
print('These two lines are not indented, so they are always run next.')

bachelor = input("You watch the bachelor?")
if bachelor == 'yes' or bachelor == 'Yes':
    print('bachelor watcher')
else:
    print('possible bachelor watcher')

"""# question on if

1. Write an if… else statement to check whether or not the suitcase weighs more than 50 pounds by reading a weight from keyboard


2. Write an if… else statement for multiple conditions.

Print out these recommendations based on the weather conditions: by reading the temparature and rain as:

temperature = float(eval(input('What is the temperature? ')))


weather = input('What is the weather (rain or shine)? ')


1) The temperature is higher than 60 degrees and it is raining: Bring an umbrella.

2) The temperature is lower than or equal to 60 degrees and it is raining: Bring an umbrella and a jacket.

3) The temperature is higher than 60 degrees and the sun is shining: Wear a T-shirt.

4) The temperature is lower than or equal to 60 degrees and the sun is shining: Bring a jacket.
"""

x,y=50,30
print( (x ^ y) + ( x & y) << 1 )

a=[9,3,5]
print(sum(a))

"""<a id='fl'></a>
# For loop

The range function
range(n) creates an iterable of numbers 0, 1, 2, ..., n-1.
"""

for num in range(1,10,2):
    print(num)

total = 0
for number in range(5):
    total = total + number
print(total)

"""# Problems on for

Fill in the blanks to produce correct results:

1. Total length of the strings in the list: ["red", "green", "blue"] => 12

total = 0

for word in ["red", "green", "blue"]:

    ____ = ____ + len(word)
    
print(total)



2. List of word lengths: ["red", "green", "blue"] => [3, 5, 4]


lengths = ____

for word in ["red", "green", "blue"]:

    lengths.____(____)
    
print(lengths)

# another set of problems on for

1. Write a for loop that iterates from number 1 to number 15.

    On each iteration, print out the number.

2. Iterate from 1 to 30 using the following instructions:

    1) If a number is divisible by 3, print "fizz."
    
    2) If a number is divisible by 5, print "buzz."
    
    3) If a number is both divisible by 3 and by 5, print "fizzbuzz."
    
    4) Otherwise, print just the number.

# While Loop
"""

x = 0
while x < 10:
    print(x)
    x = x+1

"""<a id='lists'></a>
# Collections


    Lists: [1, 2, 'steve', False]
    Tuples: (1, 2, 'steve', False)
"""

songs = ['Survival','Nonstop','Elevate','Emotionless',"God's Plan",
"I'm Upset",'8 Out Of 10','Mob Ties']

type(songs)

songs[0]

print(len(songs))

songs[3] = 'In my feelings'

print(len(songs))

songs

list1 = [11,23,35,46,51,62,78, 89, 90,456, 345, 789, 234]
print("3rd Item in List is: ", list1[2]) # Indexing
print("2nd Last in List is: ", list1[-2]) # Indexing from Last
print("List from 2nd Item is: ", list1[2:])
print("List from 2nd to 4th Item is: ", list1[2:5])
print("List odd Items is: ", list1[::2])
print("List even Items is: ", list1[1::2])
print("List reversed Items is: ", list1[-1::-1])

songs

songs.append('Jump Man')

print(songs)

del songs[3]

print(songs)

new_playlist = []

new_playlist.append('0 to 100')

new_playlist

a = list()

import random

a.append(random.randint(1,30))

print(a)

print(a)

for i in range(0,10):
    a.append(random.randint(1,200000))

print(a)

print(a)

for i in range(0,5):
    a.append(random.randint(1,20))

print(a)

randomlist = []
#random.seed(42)
randomlist = random.sample(range(10,30),5)
print(randomlist)

# Create a new empty list:
l = []

# Add an element using append():
l.append("A")
l.append("d")
l.append("d")

print(l)

# Reassign a range of values with another list:
l[1:3] = ["b", "c"]
print(l)

#Use the .insert() method to add values at specific indices.
l.insert(0, "i")
l.insert(1, "n")
l.insert(2, "s")
l.insert(3, "e")
l.insert(4, "r")
l.insert(5, "t")

print(l)

#The .remove() method can be used to remove specific values if they appear in a list.
l.remove("A")
print(l)

#On the other hand, the del() function can be used with a list and index to delete values.
del l[7]
del l[6]

print(l)

Ages = [ '20', '26', '56', '54', '32', '28','23','99', '87', '10', '65', '88', '66',
                  '48', '42', '27','33','38','83','94','66','44']
print(sorted(Ages, reverse=False))
print(Ages.sort())
print(sorted(Ages, reverse=True))

D = ['MONDAY', 'TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY']
print(D[-5], D[-4])
print(D[3], D[4])
print(D[2:5])

#print(reverse(D))
print(D.reverse())
print(list(reversed(D)))

Mylist =['a','a','b','b','b','c','c','d','e']
print(Mylist.index('d'))
Mylist.pop(0)
print(Mylist)

N = [24, 27, 29, 26, 25, 23, 20]
len(N)

"""# List Comprehension
 check this folder :E:\Python for Data Science\listcomprehension
"""

res = [random.randrange(1, 50, 1) for i in range(10)]
print(res)

for number in [2, 4, 6]:
    print(number)

for bachelor in [3, 5, 6]:
    print(bachelor)

#n=[x*x for x in range(4)]
#print(n)
#
#list = [2,4,6,8]
#a= (x**3 for x in list)
#print(next(a))
#print(a)
#List Comprehension

l1 = [1,2,3,4,5]

for i in range(0,len(l1)):
    l1[i] = l1[i]+10
print(l1)

l2 = [x+10 for x in l1]
print(l2)

l3 = [x**3 for x in l1]
print(l3)

fahrenheit = [((float(9)/5)*x+32) for x in l1]
print(fahrenheit)

e = [x for x in l1 if x%2==0]
print(e)

"""<a id='tup'></a>
# Tuples
"""

tuple1 = (1,2,3,4,5,6)
print("3rd Item in tuple is: ", tuple1[2]) # Indexed Item
print("Tuple from 2nd Item is: ", tuple1[2:])
print("Tuple from 2nd to 4th Item is: ", tuple1[2:5])
print("Tuple odd Items is: ", tuple1[::2])
print("Tuple even Items is: ", tuple1[1::2])
print("Tuple reversed Items is: ", tuple1[-1::-1])

song_tuple = ('Survival','Nonstop','Elevate','Emotionless',"God's Plan"
"I'm Upset",'8 Out Of 10','Mob Ties')

song_tuple[3]

song_tuple[3] = 'In my feelings'

type(song_tuple)

song_list = list(song_tuple)

type(song_list)

print(song_list)

tuple(song_list)

point = (10, 20)
print(point)
print(type(point))

# They can be sliced just like lists and strings:
point[0]

#Unpacking a variable is a common practice when iterating through Python data types.
#Unpacking essentially allows us to simultaneously set new variables to items in a list, tuple, or dictionary.

# Unpacking:
x, y = point

print("x = {}".format(x))
print("y = {}".format(y))

"""<a id='fun'></a>
# Functions
"""

def hi():
    print('Hello World!')

hi()

def birth_date(month, day, year=2020):
    bday = str(month) + '/' + str(day) + '/' + str(year)
    print(bday)

birth_date(day = 5, year = 1979)

birth_date(5, 11)

def add(x,y):
    return x+y
print("Sum is ",add(3,5))

def fact(n):
    f=1
    for i in range(1,n+1):
        f=f*i
    return f

print("Factorial of the number is:",fact(6))

#find mistake
word=['f','a','t','h','i','m','a']
def count_vow(word):
    for i in word:
        if(i=='a'or i=='e'or i=='i'or i=='o'or i=='u'):
            word.remove(i)
    return word
count_vow(word)

test_list = [8, 1, -4, 8, -1]

def first_negative(list_of_numbers):
    '''
    This function takes in a list and
    returns the first negative number in
    list.

    Arguments
    ---------
    list_of_numbers: list type

    Returns
    -------
    int type, smallest value in list
    '''
    #loop over the list of numbers
    for num in list_of_numbers:
        if num < 0: #check if number is negative
            print(num) #print the number
            return num  #return the number

first_negative(test_list)

sentence = "A MAN KNOCKED ON MY DOOR AND ASKED FOR A SMALL DONATION TOWARDS THE LOCAL SWIMMING POOL SO I GAVE HIM A GLASS OF WATER"

def vowel_counter(word):
    '''
    This function takes in a word and
    counts how many vowels
    '''
    count = 0
    for letter in word:
        if letter in 'aeiouAEIOU':
#         if letter in ['a', 'e', 'i', 'o', 'u']:
            count += 1
    return count

print(vowel_counter(sentence))

"""Code a function called "add_three"

ACCEPT  three inputs, all numbers (floats or ints)

RETURN the sum of the three numbers added together.

Build a function called 'cap_first'

ACCEPT a non-empty string input.

RETURN that same string, with first letter capitalized,and all subsequent letters in lower-case.

<a id='que'></a>
# Questions on for the above concepts

1. What are the types of the following variables?

    a = 1

    b = 2.6

    c = [1,2,3,5,6]
    
    d = {'val': 'kilmer', 'reggie':'bush'}
    
    e = ('one', 'two', 'three')
    
    f = {1:{'key':'value'}, 2:{'key2':'value2'}}
    
    g = True
    
    h = False
    
    i = 'integer'

2. What is the difference between a "mutable" and "immutable" object?
"""

court_shows = ["America's Court with Judge Ross",
              "The Blame Game",
              "Couples Court with The Cutlers",
              "Divorce Court",
              "Guy Court",
              "Hot Bench",
              "Judge Wapner's Animal Court"]

"""3. Print the court_show list

4. Print the names of the first and last shows in the list.

5. Print the first five shows in the list.

6. Append an animal to the list of animals.
"""

animals = ['duck', 'rat', 'boar', 'slug', 'mammoth', 'gazelle']

"""7. Divide the length of the fifth animal by the second.

8. Count the number of times 0 appears in the following list

binary = [0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,1]

<a id='dict'></a>
# Dictionaries
Dictionaries are a non-ordered Python data type. Instead of using an ordered index to access data stored in a dictionary, we use a system of key-value pairs.

A key is similar to a variable name.

A value is similar to the value assigned to the variable.

Curly braces ({ }) enclose dictionaries. Note: You can also use curly braces to construct a set. The first input in a dictionary pair is the "key." The second input in a dictionary pair is the "value." The general format looks like this:
"""

params = {"key1" : 1.0,
          "key2" : 2.0,
          "key3" : 3.0,}

print(type(params))
print(params)

# Value for parameter2 in the params dictionary:
params["key2"]

# Adding a new dictionary entry:
params["key4"] = "D"

# Print the entirety of the dictionary:
print(params)

# Reassigning the value of a key-value pair in the dictionary:
params["key1"] = "A"
params["key2"] = "B"

print(params)

# Dictionaries also have methods.

# Convert a dictionary to a list of tuples (key-value pairs).
# This is later used to conveniently loop through a dictionary:
list(params.items())

tel = {'jack': 4098, 'sape': 4139}

type(tel)

tel['jack']

#reassigning guide key
tel['guido'] = 4127
tel

del tel['sape']
tel['irv'] = 4127# artists['denre']['albums']='hello'
tel

list(tel)

sorted(tel)

'guido' in tel

'jack' not in tel

#Another way of dectionary creation
d = dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])

d

d.keys()

tel.keys()

tel.values()

tel.items()

artists = {
    'Drake': {
        'genre': 'Pop',
        'albums': ["God's Plan", "Scorpion", "Care Package"],
        'on_tour': True
    },
    'Kraftwerk':{
        'genre': 'Electronic',
        'albums': ['Manmachine', 'Computerworld', 'Autobahn'],
        'on_tour': False
    },
    'Melt-Banana':{
        'genre': 'Power Violence',
        'albums': ['Scratch or Stitch', 'MxBx', 'Speak Squeak Creak'],
        'on_tour': True
    }
}

#what is Drake's second album?
artists['Drake']['albums'][1]

#I would like to know Melt-Banana's albums
artists['Melt-Banana']['albums']

"""# Questions on dictionaries

1. Create an New York zipcode dictionary.

    With the following key:value pairs:

        'wall_street': 10005

        'chinatown': 10013

        'harlem':10031

        'katonah':10536

2. Add scotia to the dictionary with zipcode 12302.

3. Get the zipcode for 'chinatown', and assign it to a variable.

4. Get the keys out of the dictionary

5. Get the key:value pairs out of the dictionary as a list of tuples.

<a id='sets'></a>
# Sets
"""

v1 = {'A', 'B', 'A', 'A', 'B'}

v1

lyrics = '''And still
Bad things
It's a lot of bad things
That they wishin' and wishin' and wishin' and wishin'
They wishin' on me
Bad things
It's a lot of bad things
That they wishin' and wishin' and wishin' and wishin'
They wishin' on me
Yuh, ayy, ayy
'''

len(lyrics)

words = lyrics.split()

words

words[:10]

len(words)

set(words)

len(set(words))

lexical_diversity = len(set(words))/len(words)
print(lexical_diversity)

###print the lexical diversity rounded to two decimals
print(f'This verse of Drake is {lexical_diversity:.2f}')

words = {'a', 'new', 'set', 'of', 'words'}

words.add('G.O.D')

words

words.remove('words')

words

other_words = {'another', 'set', 'of', 'new', 'words'}

words.intersection(other_words)

words.union(other_words)

x1 = {9,5,6,3,7,8,1}
x2 = {7,1,3,2,0,4,8}
x1.symmetric_difference(x2)
print(x1.intersection(x2))

"""<a id='quer'></a>
# Queries and Inputs
"""

#a,b,c=55
#a,b,c = 55,55,55
#a=b=c=55
#a=55;b=a;c=b
#x=45
#y=7
#x%=y
#print(x)
#a=4**3
#b=pow(4,3)
#print(a,b)
#x=8
#if x>8:
#    print(20)
#else:
#    print(10)

#int('10.8')
#float(10)
#int(10)
#float(10.8)

keys = [1,2,3,4]
values = ['one', 'two','three','four']
zipdict = dict(zip(keys, values))
zipdict

zipdict.values()

dict={19:"shyamala",20:"dhgya",21:"xvbn"}
dict.get(19)

dict[19]

